import React, { useEffect, useState } from "react";
import Header from "../../components/Layouts/Headers/Header";
import Footer from "../../components/Layouts/Footer/Footer";
import "./Profile.css";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import { Helmet } from "react-helmet";
import axios from "axios";
import "react-toastify/dist/ReactToastify.css";
import { toast } from "react-toastify";
import { useDispatch } from "react-redux";
import { axiosConfig } from "../../axios/config";
import CustomInput from "../../components/common/CustomInput";
import CustomButton from "../../components/common/CustomButton";

function Profile() {
  const dispatch = useDispatch();
  const user = JSON.parse(localStorage.getItem("user"));
  const userId = user.id;

  // L·∫•y gi√°  tr·ªã √¥ input
  const [formInput, setFormInput] = useState({
    name: user.name,
    phone: "",
    email: user.email,
    education: "",
    certification: "",
    address: "",
    gender: "",
    applications: [],
  });

  // load user theo id
  useEffect(() => {
    axiosConfig
      .get(`/users/${userId}`)
      .then((res) => {
        setFormInput(res.data);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormInput({
      ...formInput,
      [name]: value,
    });
  };

  // Validate form
  const [validationErrors, setValidationErrors] = useState({
    name: "",
    phone: "",
    address: "",
    education: "",
    certification: "",
    gender: "",
  });

  const isValidPhoneNumber = (phoneNumber) => {
    const phonePattern = /^\d{10}$/;
    return phonePattern.test(phoneNumber);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const maxValue = 225;

    const errors = {
      name: !formInput.name
        ? "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n."
        : formInput.name.length > maxValue
        ? `T√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ${maxValue} k√Ω t·ª±.`
        : "",
      phone: !formInput.phone
        ? "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i."
        : !isValidPhoneNumber(formInput.phone)
        ? "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá."
        : "",
      address: !formInput.address
        ? "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ."
        : formInput.address.length > maxValue
        ? `ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ${maxValue} k√Ω t·ª±.`
        : "",
      education: !formInput.education
        ? "Vui l√† ch·ªçn h·ªçc v·∫•n"
        : formInput.education.length > maxValue
        ? `H·ªçc v·∫•n kh√¥ng ƒë∆∞·ª£c vi·∫øt qu√° ${maxValue} k√Ω t·ª±.`
        : "",
      certification: !formInput.certification
        ? "Vui l√† ch·ªçn ch·ª©ng d·ª•"
        : formInput.certification.length > maxValue
        ? `Ch·ª©ng d·ª• kh√¥ng ƒë∆∞·ª£c vi·∫øt qu√° ${maxValue} k√Ω t·ª±.`
        : "",
      gender: !formInput.gender ? "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh." : "",
    };
    setValidationErrors(errors);
    if (Object.values(errors).some((error) => error !== "")) {
      return;
    }
    axiosConfig
      .get(`/users/${userId}`)
      .then((res) => {
        const currentUserData = res.data;
        const currentPassword = currentUserData.password;

        const { password, ...rest } = formInput;

        axiosConfig
          .patch(`/users/${userId}`, rest)
          .then((res) => {
            res.data.password = currentPassword;
            dispatch({ type: "UPDATE_USER", payload: res.data });
            toast.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng üëå");
            localStorage.setItem("user", JSON.stringify(res.data));
          })
          .catch((err) => {
            console.log(err);
          });
      })
      .catch((err) => {
        console.log(err);
      });
  };

  return (
    <div>
      <Helmet>
        <title>Th√¥ng tin c√° nh√¢n</title>
      </Helmet>
      <Header />
      <div className="main">
        <div className="main-left">
          <div>
            <h3>C√†i ƒë·∫∑t th√¥ng tin c√° nh√¢n</h3>
            <Form onSubmit={handleSubmit}>
              <CustomInput
                label={"H·ªç v√† t√™n"}
                type={"text"}
                name={"name"}
                placeholder={"H·ªç v√† t√™n"}
                value={formInput.name}
                handleInputChange={handleInputChange}
                formError={validationErrors.name}
              />
              <CustomInput
                label={"Email"}
                type={"text"}
                name={"email"}
                placeholder={"Nh·∫≠p Email"}
                value={formInput.email}
                handleInputChange={handleInputChange}
                disabled={formInput.email !== ""}
              />
              <CustomInput
                label={"S·ªë ƒëi·ªán tho·∫°i"}
                type={"text"}
                name={"phone"}
                placeholder={"Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"}
                value={formInput.phone}
                handleInputChange={handleInputChange}
                formError={validationErrors.phone}
              />
              <CustomInput
                label={"ƒê·ªãa ch·ªâ"}
                type={"text"}
                name={"address"}
                placeholder={"Nh·∫≠p ƒë·ªãa ch·ªâ"}
                value={formInput.address}
                handleInputChange={handleInputChange}
                formError={validationErrors.address}
              />
              <CustomInput
                label={"H·ªçc v·∫•n"}
                type={"text"}
                name={"education"}
                placeholder={"Nh·∫≠p h·ªçc v·∫•n"}
                value={formInput.education}
                handleInputChange={handleInputChange}
                formError={validationErrors.education}
              />
              <CustomInput
                label={"Ch·ª©ng ch·ªâ"}
                type={"text"}
                name={"certification"}
                placeholder={"Nh·∫≠p ch·ª©ng ch·ªâ"}
                value={formInput.certification}
                handleInputChange={handleInputChange}
                formError={validationErrors.certification}
              />
              <Form.Group className="mb-3" controlId="formBasicPassword">
                <Form.Label>Gi·ªõi t√≠nh</Form.Label>
                <Form.Select
                  name="gender"
                  value={formInput.gender}
                  onChange={handleInputChange}
                >
                  <option value="">Gi·ªõi t√≠nh</option>
                  <option value="Nam">Nam</option>
                  <option value="N·ªØ">N·ªØ</option>
                </Form.Select>

                <div className="error-message" style={{ color: "red" }}>
                  {validationErrors.gender}
                </div>
              </Form.Group>
              <CustomButton
                style={{ width: "20%", backgroundColor: "#f07e1d" }}
                className={"btn-login"}
                variant={"success"}
                type={"submit"}
                label={"C·∫≠p nh·∫≠t"}
              />
            </Form>
          </div>
        </div>
        {/* <div className="main-right">
          <div className="profile-avatar">
            <img src="https://www.topcv.vn/images/avatar-default.jpg" alt="" />
          </div>
          <div>
            <div className="text-welcome">Ch√†o b·∫°n tr·ªü l·∫°i,</div>
            <div className="profile-fullname">{user.name}</div>
            <div>
              <span
                style={{
                  backgroundColor: "gray",
                  color: "white",
                  padding: "2px 5px",
                  borderRadius: "2px",
                }}
              >
                T√†i kho·∫£n ƒë√£ x√°c th·ª±c
              </span>
            </div>
          </div>
        </div> */}
      </div>
      <Footer />
    </div>
  );
}

export default Profile;
